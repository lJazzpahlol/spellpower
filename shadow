using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.IO;



namespace HyperElk.Core
{

    public class ShadowPriest : CombatRoutine
    {
        private string VersionNumber = "1.0.0";
        private int playerLevel => API.PlayerLevel;
        private bool inRange => API.TargetRange <= 36;

		// Shadow Buffs
		private string VampiricEmbrace = "Vampiric Embrace", InnerFire = "Inner Fire", ShadowForm = "Shadowform", ShadowWeaving = "Shadow Weaving",
					   PowerWordFortitude = "Power Word Fortitude", POPowerWordFortitude = "Prayer of Fortitude", DivineSpirit = "Divine Spirit",
					   PODivineSpirit = "Prayer of Divine Spirit", ShadowProt = "Shadow Protection", POShadowProt = "Prayer of Shadow Protection",
					   FlareOfTheHeavens = "Flare of the Heavens", DyingCurse = "Dying Curse", EmbraceOfTheSpider = "Embrace of the Spider", 
					   Starlight = "Starlight", Bloodlust = "Bloodlust", BloodlustBuff = "BloodlustBuff";

		// Shadowspells
		private string ShadowWordPain = "Shadow Word: Pain", VampiricTouch = "Vampiric Touch", DevouringPlague = "Devouring Plague", MindFlay = "Mind Flay",
					   MindBlast = "Mind Blast", ShadowWordDeath = "Shadow Word: Death", Shadowfiend = "Shadowfiend", Trinket1 = "Trinket1",
					   Trinket2 = "Trinket2", Stoppy = "Stopcast", Gloves = "Engineering Gloves", MO = "Mouseover", MindSear = "Mind Sear", FO = "Focus",
					   Dispersion = "Dispersion", Fade = "Fade", InnerFocus = "Inner Focus", EatingBuff = "Food Buff", MageEatingBuff = "Mage Food Buff",
					   Wanding = "Wanding", Shoot = "Shoot", BigBang = "Big Bang", Berserking = "Berserking", PotionOfSpeed = "Potion of Speed", Scales = "Scales of Fate", 
					   PowerWordShield = "Power Word: Shield";

		// Debuff
		private string ShadowMastery = "Shadow Mastery";
		
		private string WeakenedSoul = "Weakened Soul";
		
		
		private string SaroBomb = "Saronite Bomb";
		private string SapperCharge = "Global Thermal Sapper Charge";
		
		private const string VTTTDThresholdID = "VTTTDThreshold";
		private const string DPTTDThresholdID = "DPTTDThreshold";
		private const string SWPTTDThresholdID = "SWPTTDThreshold";
		private const string MF2DelayID = "MF2Delay";
		private const string MindFlayDelayID = "MindFlayDelay";
		
		private static readonly Stopwatch BuffWatch = new Stopwatch();
		
		private string SpellPowerLua => "local spellPower = GetSpellBonusDamage(2) elk_data.updatePixelValue(elk_data.weakAuraStuffFrame, spellPower)";
		
		public int GetCurrentSpellPower()
		{
			API.setCustomLUA(SpellPowerLua);
			int currentSP = API.CustomLuaValue;
			API.WriteLog($"Successfully read spell power: {currentSP}");
			return currentSP;
		}

		public bool MindBlastDecision()
		{
			double currentHaste = API.PlayerGetHaste;
			return GetCurrentSpellPower() < 39237 * Math.Pow(0.975, currentHaste * 100);
		}





		// Toggle
		private string AutoTab = "AutoTab", MOToggle = "MO", Sear = "OnlySear", NoMB = "MB/D OFF", SF = "FiendNow", FOToggle = "FO";

		private string ShadowCrash = "Shadow Crash";

		private int MF2Delay => API.numbPercentListLong[CombatRoutine.GetPropertyInt(MF2DelayID)];

        // private int MF2Delay = 15;
		
		// Boss Specific
		private bool GlovesReady => API.Classic_GloveEnchantAvail;
		private bool hasDots => API.TargetHasDebuff(DevouringPlague) && API.TargetHasDebuff(VampiricTouch) && API.TargetHasDebuff(ShadowWordPain);
		private bool isSearing => API.CurrentCastSpellID("player") == 53023;
		private bool isFlaying => API.CurrentCastSpellID("player") == 48156;
		private bool isBoss => API.TargetIsBoss;
		// private bool OnlyFlayGuidList => API.TargetGUIDNPCID == 33168 || API.TargetGUIDNPCID == 34057 || API.TargetGUIDNPCID == 32955;
		private bool LastShadowCast => (API.PlayerLastSpell != VampiricTouch || API.PlayerLastSpell != MindBlast);
		private bool IsNotEating => (!API.PlayerHasBuff(MageEatingBuff) || !API.PlayerHasBuff(EatingBuff));
		private bool DontMB => (API.PlayerHasBuff(Bloodlust) || API.PlayerHasBuff(Scales) && API.PlayerHasBuff(Berserking) || API.PlayerHasBuff(PotionOfSpeed) && API.PlayerHasBuff(Berserking) || API.PlayerHasBuff(Scales) && API.PlayerHasBuff(Gloves) || API.PlayerHasBuff(Berserking) && API.PlayerHasBuff(Gloves) || API.PlayerHasBuff(PotionOfSpeed) && API.PlayerHasBuff(Gloves));
		
		// Add a list of NPC IDs
		private List<int> OnlyFlayGuidList => new List<int> 
			{ 
			  33168, 
			  34057,
			  205999,
			  205998
			  // 198706 //mirror images
			};
			
		private List<int> OnlyStarGuidList => new List<int> 
			{  
			  32955,
			  31041
			};
			
		private List<int> OnlyWandGuidList => new List<int> 
			{  
			  205999,
			  205998
			};
		
		private bool IsTargetInFlayGuidList() => OnlyFlayGuidList.Contains(API.TargetGUIDNPCID);
		private bool IsTargetInStarGuidList() => OnlyStarGuidList.Contains(API.TargetGUIDNPCID);
		private bool IsTargetInWandGuidList() => OnlyWandGuidList.Contains(API.TargetGUIDNPCID);
		
		private int VTTTDThreshold => API.numbPercentListLong[CombatRoutine.GetPropertyInt(VTTTDThresholdID)];
		private int DPTTDThreshold => API.numbPercentListLong[CombatRoutine.GetPropertyInt(DPTTDThresholdID)];
		private int SWPTTDThreshold => API.numbPercentListLong[CombatRoutine.GetPropertyInt(SWPTTDThresholdID)];
		private int MindFlayDelay => CombatRoutine.GetPropertyInt(MindFlayDelayID);

		
		private bool devouringPlagueRefreshedWithBloodlust = false;
		private bool hasCastDevouringPlagueWithBloodlust = false;

		public class Unit
			{
				public string Id { get; set; }

				public bool TargetingPlayer
				{
					get { return API.PlayerIsUnitTarget(Id); }
				}

				public Unit(string id)
				{
					Id = id;
				}
			}
	
		

		
		public override void Initialize()
        {
            CombatRoutine.isWOLTKRotation();
            CombatRoutine.Name = "Shadow Priest " + VersionNumber + " by Lost. \n";
            API.WriteLog("\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX \n" +
                "Shadow Priest PVE.\n" +
                "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            CombatRoutine.isAutoBindReady = true;
           
		   var items = new (string name, int id, string flag)[]
			{
				// Shadow buffs
				(VampiricEmbrace, 15286, null), (InnerFire, 48168, null), (ShadowForm, 15473, null), (ShadowWeaving, 15258, null),
				(ShadowProt, 48169, null), (POShadowProt, 48170, null), (DivineSpirit, 48073, null),
				(PODivineSpirit, 48074, null), (PowerWordFortitude, 48161, null), (POPowerWordFortitude, 48162, null),
				(Dispersion, 47585, null), (Fade, 586, null), (InnerFocus, 14751, null), (FlareOfTheHeavens, 64713, null), 
				(EatingBuff, 43183, null), (MageEatingBuff, 57073, null), (DyingCurse, 60494, null), (Starlight, 62807, null), 
				(Bloodlust, 2825, null), (BloodlustBuff, 2825, null), (Berserking, 26297, null), (EmbraceOfTheSpider, 60492, null), 

				// Shadow spells
				(ShadowWordPain, 48125, null), (VampiricTouch, 48160, null), (DevouringPlague, 48300, null), (MindFlay, 48156, null),
				(MindBlast, 48127, null), (ShadowWordDeath, 48158, null), (Shadowfiend, 34433, null),
				(MindSear, 53023, "D1"), (Dispersion, 47585, "D1"), (Fade, 586, "D1"), (InnerFocus, 14751, "D1"), (BigBang, 64443, null), (Shoot, 0, null), (Berserking, 26297, "D1"), (Scales, 64707, null), 
				(PotionOfSpeed, 53908, null), (Gloves, 54758, null), (PowerWordShield, 48066, null),

				// Items
				// (SaroBomb, 41119, null), (SapperCharge, 42641, null),

				// Debuffs
				(ShadowMastery, 17800, null)
			};
			
			

			foreach (var item in items)
			{
				if (item.flag == "D1")
					AddSpell(item.name, item.id, item.flag);
				else
				{
					AddBuff(item.name, item.id);
					AddSpell(item.name, item.id);
					AddDebuff(item.name, item.id);
				}
			}
			
			//Items
			AddItem(SaroBomb, 41119);
			AddItem(SapperCharge, 42641);
			
			AddDebuff(ShadowCrash, 63277);
			AddDebuff(WeakenedSoul, 6788);
			
			
			
			
			AddProp(VTTTDThresholdID, "Vampiric Touch TTD Threshold", API.numbPercentListLong, "Minimum time until target dies to cast Vampiric Touch (in seconds)", "Time to Die", 7);
			AddProp(DPTTDThresholdID, "Devouring Plague TTD Threshold", API.numbPercentListLong, "Minimum time until target dies to cast Devouring Plague (in seconds)", "Time to Die", 7);
			AddProp(SWPTTDThresholdID, "Shadow Word: Pain TTD Threshold", API.numbPercentListLong, "Minimum time until target dies to cast Shadow Word: Pain(in seconds)", "Time to Die", 7);
			
			AddProp(MF2DelayID, "MF2 Delay", API.numbPercentListLong, "Estimated MF2 delay in milliseconds", "Delay Settings", 15);
			AddProp(MindFlayDelayID, "Mind Flay to Mind Flay Delay", 30, "Delay between Mind Flay casts, set to a higher value to increase delay", "Delay Settings");

			
			

            var toggles = new string[] { AutoTab, MOToggle, Sear, NoMB, SF, FOToggle };

			foreach (string toggle in toggles)
			{
				AddToggle(toggle);
			}
			
			CombatRoutine.AddMacro(Stoppy, "D1", "None", "None", @"/stopcasting");
			CombatRoutine.AddMacro("Trinket1", "D1", "None", "None", @"/use 13");
			CombatRoutine.AddMacro("Trinket2", "D1", "None", "None", @"/use 14");
			CombatRoutine.AddMacro("Gloves", "D1", "None", "None", @"/use 10");
			CombatRoutine.AddMacro(ShadowWordPain + MO, "D1", "None", "None", @"/cast [@mouseover, harm, nodead] #48125#");
			CombatRoutine.AddMacro(VampiricTouch + MO, "D1", "None", "None", @"/cast [@mouseover, harm, nodead] #48160#");
			CombatRoutine.AddMacro(ShadowWordPain + FO, "D1", "None", "None", @"/cast [@focus, harm, nodead] #48125#");
			CombatRoutine.AddMacro(VampiricTouch + FO, "D1", "None", "None", @"/cast [@focus, harm, nodead] #48160#");
			CombatRoutine.AddMacro(MindFlay + FO, "D1", "None", "None", @"/cast [@focus, harm, nodead] #48156#");
			CombatRoutine.AddMacro("SaroBomb", "D1", "None", "None", @"/cast [@cursor] Saronite Bomb");
			CombatRoutine.AddMacro("SapperCharge", "D1", "None", "None", @"/cast Global Thermal Sapper Charge");
			CombatRoutine.AddMacro("Wanding", "D1", "None", "None", @"/cast !Shoot");
	
			
			
          
		}
		public override void CombatPulse()
		{
			
			
			if (API.CanCast(MindSear) && ((!API.PlayerIsChanneling && API.ToggleIsEnabled(Sear) && !isSearing) || (API.TargetUnitInRangeCount >= 5 && IsAOE && !isSearing))) { API.CastSpell(MindSear); return; }

			if (API.ToggleIsEnabled(AutoTab)) { AutoTabDots(); return; } 
			
			// if (IsTargetInStarGuidList()) { StarKilling(); return; } 
			
			
			
			{ CastShadowfiendInstant(); }
			
			
			
			{ FadeOffThreat(); }
			
			if (IsTargetInFlayGuidList()) { CastOnlyFlayNPCList(); return; } 
			
			

			double MindFlayCastTimeSec = 3 / (1f + API.PlayerGetHaste);
			int MindFlayCastTime = (int)(MindFlayCastTimeSec * 100);
			int MindFlayTickTime = MindFlayCastTime / 3;

			if (API.PlayerIsChanneling && API.PlayerCurrentCastTimeRemaining >= MindFlayTickTime - MF2Delay
				&& API.PlayerCurrentCastTimeRemaining <= (MindFlayTickTime + MF2Delay))
			{
				CastBestSpellNoMF();
				API.WriteLog("Haste value: " + API.PlayerGetHaste);

				return;
			}

			if ((API.PlayerCurrentCastTimeRemaining <= MindFlayDelay && API.PlayerCurrentCastSpellID != 48156)
				|| (API.PlayerCurrentCastSpellID == 48156 && API.PlayerCurrentCastTimeRemaining <= MF2Delay))
			{
				CastBestSpell();
				API.WriteLog("Haste value: " + API.PlayerGetHaste);

			}
		}
		
		
		

			
			/* 	public bool MindBlastDecision()
					{
						double currentHaste = API.PlayerGetHaste; // Retrieve the current haste
						double threshold = 39237 * Math.Pow(0.975, currentHaste * 100); // Calculate the threshold
						double currentSP = GetCurrentSpellPower(); // Retrieve the current spell power

						if (currentSP >= threshold)
						{
							// Don't use Mind Blast
							return false;
						}
						else
						{
							// Use Mind Blast
							return true;
						}
					} */


		



		

		



		
			
		public void FadeOffThreat()
			{
				Unit target = new Unit("target");
				Unit mouseover = new Unit("mouseover");

				// Check if target or mouseover is targeting the player
				bool isPlayerTargeted = target.TargetingPlayer || mouseover.TargetingPlayer;

				// Cast Fade if target or mouseover is targeting the player and player is in a group
				if (API.CanCast(Fade) && isPlayerTargeted && (API.PlayerIsInGroup || API.PlayerIsInRaid)) {
					API.CastSpell(Fade);
					return;
				}

				// Cast Power Word: Shield if Fade is on cooldown, player's health is below 95%, mana is above 20%,
				// player doesn't have the Weakened Soul debuff and target or mouseover is targeting the player
				if (API.CanCast(PowerWordShield) && API.PlayerIsMoving && !API.CanCast(Fade) && API.PlayerHealthPercent < 95 && API.PlayerMana > 20 && !API.PlayerHasDebuff(WeakenedSoul) && isPlayerTargeted) {
					API.CastSpell(PowerWordShield);
					return;
				}

				// Cast Dispersion if Fade and Shield are on cooldown, player has Weakened Soul debuff,
				// health is below 20%, and target or mouseover is targeting the player
				if (API.CanCast(Dispersion) && !API.CanCast(Fade) && !API.CanCast(PowerWordShield) && API.PlayerHasDebuff(WeakenedSoul) && API.PlayerHealthPercent < 20 && isPlayerTargeted) {
					API.CastSpell(Dispersion);
					return;
				}
			}


		public void CastShadowfiendInstant()
			{
				// Check if Shadowfiend toggle is enabled and Shadowfiend spell is off cooldown
				if (API.ToggleIsEnabled(SF) && IsCooldowns && API.CanCast(Shadowfiend)) {
					API.CastSpell(Shadowfiend);
				}
			}

		

		public void CastOnlyFlayNPCList()
		{
			if (IsTargetInFlayGuidList() && API.CanCast(MindFlay))
			{
				double MindFlayCastTimeSec = 3 / (1f + API.PlayerGetHaste);
				int MindFlayCastTime = (int)(MindFlayCastTimeSec * 100);
				int MindFlayTickTime = MindFlayCastTime / 3;

				if (!API.PlayerIsCasting(true) || (API.PlayerIsCasting(true) && API.PlayerCurrentCastSpellID != 48156))
				{
					API.CastSpell(MindFlay);
					return;
				}
			}
		}
		
		public void CastOnlyWandNPCList()
		{
			if (IsTargetInWandGuidList() && !API.Classic_PlayerIsAutoAttackRange)
			{
			
				API.CastSpell(Wanding);
				return;
			}
			
		}
		
		
		/* private void AutoTabDots()
		{
			if(API.ToggleIsEnabled(AutoTab))
			{
				// Resets the stopwatch if needed
				if (BuffWatch.ElapsedMilliseconds > 40)
				{
					BuffWatch.Reset();
				}
				
				if (!BuffWatch.IsRunning && API.PlayerCanAttackTarget && API.TargetRange <= 36)
				{
					if (!API.TargetHasDebuff(VampiricTouch) && API.PlayerCurrentCastSpellID != 48160 && API.CanCast(VampiricTouch))
					{
						API.CastSpell(VampiricTouch);
						BuffWatch.Start();
					}
					else if (!API.TargetHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain))
					{
						API.CastSpell(ShadowWordPain);
						BuffWatch.Start();
					}
					else if(API.TargetHasDebuff(VampiricTouch) && API.TargetHasDebuff(ShadowWordPain))
					{
						API.PressTab(); // Cycle to the next target.
						BuffWatch.Start();
					}
				}
			}
		} */
		
		private void AutoTabDots()
		{
			if (API.ToggleIsEnabled(AutoTab) && API.PlayerCanAttackTarget && API.TargetRange <= 36)
			{
				if (!API.TargetHasDebuff(VampiricTouch) && API.PlayerCurrentCastSpellID != 48160 && API.CanCast(VampiricTouch))
				{
					API.CastSpell(VampiricTouch);
				}
				else if (!API.TargetHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain))
				{
					API.CastSpell(ShadowWordPain);
				}
			}
		}





		
		// public void StarKilling()
		// {
			// if (IsTargetInStarGuidList())
			// {
				// if (!API.TargetHasDebuff(VampiricTouch) &&
					// API.CanCast(VampiricTouch) && (API.PlayerIsChanneling || (API.PlayerCurrentCastSpellID != 48160 && API.LastSpellCastInGame != VampiricTouch)) && API.TargetHealthPercent > 65) { API.CastSpell(VampiricTouch); return; }
				// if (!API.TargetHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain) && API.TargetHealthPercent > 75) { API.CastSpell(ShadowWordPain); return; }
				// if (API.CanCast(MindFlay) && (!API.PlayerIsCasting(true) || API.PlayerCurrentCastSpellID != 48156) && !API.TargetHasDebuff(ShadowWordPain)) { API.CastSpell(MindFlay); return; }
				
			// }
		// }
		
		private void SendCooldowns()
		{
			if (!IsCooldowns || API.PlayerIsCasting() || API.PlayerIsChanneling || isFlaying) return;

			bool trinket1Ready = API.PlayerTrinketIsUsable(1) && API.PlayerTrinketRemainingCD(1) == 0;
			bool glovesReady = GlovesReady;
			bool berserkingReady = API.CanCast(Berserking);

			if (trinket1Ready) API.CastSpell("Trinket1");
			if (glovesReady) API.CastSpell("Gloves");
			if (berserkingReady) API.CastSpell("Berserking");

			string[] items = { "SapperCharge", "SaroBomb" };
			bool[] itemConditions = {
				API.PlayerItemCanUse(SapperCharge) && API.TargetRange <= 12,
				API.PlayerItemCanUse(SaroBomb) && API.PlayerCanAttackMouseover
			};

			for (int i = 0; i < items.Length; i++)
				if (itemConditions[i]) { API.CastSpell(items[i]); return; }

			if (API.CanCast(Shadowfiend) && API.TargetHasDebuff(VampiricTouch) && API.TargetHasDebuff(DevouringPlague)) { API.CastSpell(Shadowfiend); return; }
			if (API.CanCast(InnerFocus) && hasDots && (API.PlayerHasBuff(FlareOfTheHeavens) || API.PlayerHasBuff(DyingCurse) || API.PlayerHasBuff(EmbraceOfTheSpider)) && !API.CanCast(Shadowfiend)) { API.CastSpell(InnerFocus); return; }
			if (API.PlayerHasBuff(InnerFocus) && !API.CanCast(Shadowfiend)) { API.CastSpell(MindFlay); API.WriteLog("Mind Flay w/InnerFocus"); return; }
		}


		
		private void ApplyMouseoverDots()
		{
			if (API.ToggleIsEnabled(MOToggle) && API.PlayerCanAttackMouseover)
			{
				int VTCastTime = (int)((1.5 / (1f + API.PlayerGetHaste)) * 100);
				int targetTTD = API.TargetTTD;
				int mouseoverTTD = API.MouseoverTTD;
				int vtTTDThreshold = VTTTDThreshold;
				int swpTTDThreshold = SWPTTDThreshold;

				bool shouldCastVT = API.MouseoverRange <= 36 && API.CanCast(VampiricTouch) && (API.MouseoverDebuffRemainingTime(VampiricTouch) < VTCastTime || !API.MouseoverHasDebuff(VampiricTouch)) && API.PlayerCurrentCastSpellID != 48160 && API.LastSpellCastInGame != VampiricTouch && mouseoverTTD > vtTTDThreshold;
				bool shouldCastSWP = API.MouseoverRange <= 36 && API.MouseoverGUIDNPCID != 34607 && !API.MouseoverHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain) && API.PlayerBuffStacks(ShadowWeaving) == 5 && mouseoverTTD > swpTTDThreshold;

				if (shouldCastVT || shouldCastSWP)
				{
					API.CastSpell(shouldCastVT ? VampiricTouch + MO : ShadowWordPain + MO);
					return;
				}
			}
		}


		private void ApplyFocusDots()
		{
			if (!API.ToggleIsEnabled(FOToggle) || !API.PlayerCanAttackFocus || API.FocusRange > 36) return;
			
			if (API.FocusHasDebuff(ShadowWordPain) && API.FocusDebuffRemainingTime(ShadowWordPain) < 500) 
			{
				API.CastSpell(MindFlay + FO);
				API.CastSpell(Stoppy);
				API.WriteLog("Focus Flay Refresh");
			}
			else if (API.CanCast(VampiricTouch) && 
					 (API.FocusDebuffRemainingTime(VampiricTouch) < (int)((1.5 / (1f + API.PlayerGetHaste)) * 100) || !API.FocusHasDebuff(VampiricTouch)) && 
					 API.PlayerCurrentCastSpellID != 48160 && 
					 API.LastSpellCastInGame != VampiricTouch && 
					 API.FocusTTD > VTTTDThreshold) 
			{
				API.CastSpell(VampiricTouch + FO);
			}
			else if (!API.FocusHasDebuff(ShadowWordPain) && 
					 API.CanCast(ShadowWordPain) && 
					 API.PlayerBuffStacks(ShadowWeaving) == 5 && 
					 API.FocusTTD > SWPTTDThreshold) 
			{
				API.CastSpell(ShadowWordPain + FO);
			}
		}


		private bool CastDevouringPlague()
		{
			int targetTTD = API.TargetTTD;

			if (API.CanCast(DevouringPlague) && targetTTD > DPTTDThreshold && !API.PlayerHasBuff(BloodlustBuff) && API.PlayerCurrentCastSpellID != 48123 && API.LastSpellCastInGame != DevouringPlague)
			{
				API.CastSpell(DevouringPlague);
				API.WriteLog("Regular Devouring Plague");
				return true;
			}
			if (API.PlayerHasBuff(BloodlustBuff) && API.CanCast(DevouringPlague) && API.PlayerCurrentCastSpellID != 48123 && API.LastSpellCastInGame != DevouringPlague)
			{
				// Check if Devouring Plague is already on the target
				if (API.TargetDebuffRemainingTime(DevouringPlague) > 0)
				{
					// If it's the first time applying the buff with Bloodlust active
					if (!devouringPlagueRefreshedWithBloodlust)
					{
						API.CastSpell(DevouringPlague);
						API.WriteLog("Snapshotted Devouring Plague");
						devouringPlagueRefreshedWithBloodlust = true;
						return true;
					}
				}
				else
				{
					// If Devouring Plague is not on the target, apply it normally
					API.CastSpell(DevouringPlague);
					API.WriteLog("Regular Devouring Plague");
					return true;
				}
			}
			return false;
		}

		
	

		public void CastBestSpellNoMF()
		{
			int targetTTD = API.TargetTTD;
			int vtTTDThreshold = VTTTDThreshold;
			int dpTTDThreshold = DPTTDThreshold;
			if (!API.ToggleIsEnabled(Sear) && !API.PlayerHasBuff(InnerFocus))
			{
				
				if (API.PlayerIsMoving)
				{
					if (API.CanCast(ShadowWordDeath) && !API.ToggleIsEnabled(NoMB)) { API.CastSpell(ShadowWordDeath); return; }
					// if (API.ToggleIsEnabled(DPMove) && API.CanCast(DevouringPlague)) { API.CastSpell(DevouringPlague); return; }
				}
				if (!API.TargetHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain) && API.PlayerBuffStacks(ShadowWeaving) == 5) { API.CastSpell(ShadowWordPain); return; }
				
				{ ApplyMouseoverDots(); }
				{ ApplyFocusDots(); }
				{ SendCooldowns(); }

				int VTCastTime = (int)((1.5 / (1f + API.PlayerGetHaste)) * 100);

				if ((API.TargetDebuffRemainingTime(VampiricTouch) < VTCastTime || !API.TargetHasDebuff(VampiricTouch)) &&
					API.CanCast(VampiricTouch) && API.PlayerCurrentCastSpellID != 48160 && API.LastSpellCastInGame != VampiricTouch && targetTTD > vtTTDThreshold) { API.CastSpell(VampiricTouch); return; }
					
					
				hasCastDevouringPlagueWithBloodlust = !API.PlayerHasBuff(BloodlustBuff) && hasCastDevouringPlagueWithBloodlust ? false : hasCastDevouringPlagueWithBloodlust;

				if (API.CanCast(DevouringPlague) && targetTTD > dpTTDThreshold && (API.TargetDebuffRemainingTime(DevouringPlague) == 0 || (API.PlayerHasBuff(BloodlustBuff) && !hasCastDevouringPlagueWithBloodlust)))
				{
					API.CastSpell(DevouringPlague);
					hasCastDevouringPlagueWithBloodlust = API.PlayerHasBuff(BloodlustBuff) ? true : hasCastDevouringPlagueWithBloodlust;
					return;
				}
				// float hastePercentage = API.PlayerGetHaste * 100 - 100;
				// if (API.CanCast(DevouringPlague) && API.TargetDebuffRemainingTime(DevouringPlague) == 0 && targetTTD > dpTTDThreshold) { API.CastSpell(DevouringPlague); return; }
				if (MindBlastDecision() && API.CanCast(MindBlast) && API.PlayerCurrentCastSpellID != 48127 && API.LastSpellCastInGame != MindBlast && !API.ToggleIsEnabled(NoMB)) { API.CastSpell(MindBlast); return; }
				int GCD = (int)(API.SpellGCDTotalDuration + 20);
				if (API.CanCast(ShadowWordDeath) && !API.ToggleIsEnabled(NoMB) && (API.TargetDebuffRemainingTime(DevouringPlague) < GCD)) { API.CastSpell(ShadowWordDeath); return; }
			}
		}


			public void CastBestSpell()
				{
				// float hastePercentage = API.PlayerGetHaste * 100 - 100;	
				int targetTTD = API.TargetTTD;
				int vtTTDThreshold = VTTTDThreshold;
				int dpTTDThreshold = DPTTDThreshold;
				string[] defensiveSpells = { Dispersion, Fade };
				int[] healthThresholds = { 10, 15 };
				for (int i = 0; i < defensiveSpells.Length; i++) { if (API.CanCast(defensiveSpells[i]) && API.PlayerHealthPercent <= healthThresholds[i] && (!API.PlayerHasBuff(defensiveSpells[i]) || API.PlayerIsMoving)) { API.CastSpell(defensiveSpells[i]); return; } }

				
				// if (API.CanCast(MindBlast) && !API.PlayerIsInCombat && !API.ToggleIsEnabled(Sear) && !API.ToggleIsEnabled(NoMB)) { API.CastSpell(MindBlast); API.WriteLog("Mind Blast Opener"); return; }
				if (API.PlayerIsMoving && !API.ToggleIsEnabled(NoMB) && API.CanCast(ShadowWordDeath)) { API.CastSpell(ShadowWordDeath); return; }
				
				{ ApplyMouseoverDots(); }
				{ ApplyFocusDots(); }
				{ SendCooldowns(); }
				
				if (!API.TargetHasDebuff(ShadowWordPain) && API.CanCast(ShadowWordPain) && API.PlayerBuffStacks(ShadowWeaving) == 5) { API.CastSpell(ShadowWordPain); return; }
				
				


				
				double MindFlayCastTimeSec = (3 / (1f + API.PlayerGetHaste));
				int MindFlayCastTime = (int)(MindFlayCastTimeSec * 100);
				int MindFlayTickTime = MindFlayCastTime / 3;
				

				double VTCastTimeSec = (1.5 / (1f + API.PlayerGetHaste));
				int VTCastTime = (int)(VTCastTimeSec * 100);

				if (!API.ToggleIsEnabled(Sear) && !API.PlayerHasBuff(InnerFocus))
				{
					if (API.TargetDebuffRemainingTime(VampiricTouch) < VTCastTime || !API.TargetHasDebuff(VampiricTouch) && targetTTD > vtTTDThreshold)
					{
						if (API.CanCast(VampiricTouch) && API.PlayerCurrentCastSpellID != 48160 && API.LastSpellCastInGame != VampiricTouch && targetTTD > vtTTDThreshold)
						{
							API.CastSpell(VampiricTouch);
							return;
						}
					}
				
				
			
				string[] spells = { InnerFire, ShadowForm };
				foreach (string spell in spells) { if (API.CanCast(spell) && !API.PlayerHasBuff(spell)) { API.CastSpell(spell); return; } }
				
				hasCastDevouringPlagueWithBloodlust = !API.PlayerHasBuff(BloodlustBuff) && hasCastDevouringPlagueWithBloodlust ? false : hasCastDevouringPlagueWithBloodlust;

				if (API.CanCast(DevouringPlague) && targetTTD > dpTTDThreshold && (API.TargetDebuffRemainingTime(DevouringPlague) == 0 || (API.PlayerHasBuff(BloodlustBuff) && !hasCastDevouringPlagueWithBloodlust)))
				{
					API.CastSpell(DevouringPlague);
					hasCastDevouringPlagueWithBloodlust = API.PlayerHasBuff(BloodlustBuff) ? true : hasCastDevouringPlagueWithBloodlust;
					return;
				}

				
				if (MindBlastDecision() && API.CanCast(MindBlast) && API.PlayerCurrentCastSpellID != 48127 && API.LastSpellCastInGame != MindBlast && !API.ToggleIsEnabled(NoMB)) { API.CastSpell(MindBlast); return; }

				int GCD = (int)(API.SpellGCDTotalDuration + 20);
				if (API.CanCast(ShadowWordDeath) && !API.ToggleIsEnabled(NoMB) && (API.TargetDebuffRemainingTime(DevouringPlague) < GCD)) { API.CastSpell(ShadowWordDeath); return; }

				if (API.TargetUnitInRangeCount >= 3 && IsAOE && API.CanCast(MindSear)) { API.CastSpell(MindSear); return; }
				if (API.TargetUnitInRangeCount <= 2 && IsAOE && API.CanCast(MindFlay)) { API.CastSpell(MindFlay); return; }
				if (!IsAOE && API.CanCast(MindFlay)) { API.CastSpell(MindFlay); return; }
				}
				}
			

        public override void OutOfCombatPulse()
				{
					if (!API.PlayerIsMounted && IsNotEating)
					{
						CastSpellIfNotActive(VampiricEmbrace);
						CastSpellIfNotActive(InnerFire);
						CastBuffIfApplicable(PowerWordFortitude, POPowerWordFortitude);
						CastBuffIfApplicable(DivineSpirit, PODivineSpirit);
						CastBuffIfApplicable(ShadowProt, POShadowProt);
						CastSpellIfNotActive(ShadowForm);
					}
				}

				private void CastSpellIfNotActive(string spell)
				{
					if (API.CanCast(spell) && !API.PlayerHasBuff(spell))
					{
						API.CastSpell(spell);
					}
				}

				private void CastBuffIfApplicable(string buff, string raidBuff)
				{
					if (API.CanCast(buff) && !API.PlayerHasBuff(buff) && !API.PlayerHasBuff(raidBuff) && (!API.PlayerIsInRaid || API.PlayerIsInGroup))
					{
						API.CastSpell(buff);
					}
				}



        public override void Pulse()
        {


        }

    }
}
